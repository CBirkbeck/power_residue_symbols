import Mathlib.NumberTheory.Cyclotomic.Basic
import Mathlib.RingTheory.Ideal.Norm
import Mathlib.Algebra.GeomSum
import Mathlib.Data.Polynomial.Basic

open scoped NumberField BigOperators

variable {F : Type*} [Field F] [NumberField F] (Œ∂ : ùìû F) (n : ‚Ñï) (h : IsPrimitiveRoot Œ∂ n)
variable (p : Ideal (ùìû F)) (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•)

/--The residue field of a number field (specifically the ring of intergers) at a prime-/
abbrev ResidueFieldAtPrime (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•) :=
  LocalRing.ResidueField (Localization.AtPrime p)

/--The residue field of a number field (specifically the ring of intergers) at a prime-/
abbrev ResidueFieldAtPrime2 (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•) := ùìû F ‚ß∏ p

noncomputable section


-- noncomputable instance : Field (ResidueFieldAtPrime p hp) := by
  -- apply LocalRing.ResidueField.field

-- noncomputable instance : CommRing (ResidueFieldAtPrime2 p) := by
--   apply Ideal.Quotient.commRing


noncomputable instance : Field (ResidueFieldAtPrime2 p hp hp2) := by
  have h : Ideal.IsMaximal p := by
    apply Ideal.IsPrime.isMaximal hp hp2
  apply Ideal.Quotient.field




abbrev residue_map : ùìû F ‚Üí+* (ResidueFieldAtPrime p hp hp2) :=
  (LocalRing.residue (Localization.AtPrime p)).comp (algebraMap (ùìû F) (Localization.AtPrime p))


abbrev residue_map2 : ùìû F ‚Üí+* (ResidueFieldAtPrime2 p hp hp2) := Ideal.Quotient.mk p

instance as : Fintype (ResidueFieldAtPrime2 p hp hp2) := Ideal.fintypeQuotientOfFreeOfNeBot p hp2

lemma l1 : Fintype.card (ResidueFieldAtPrime2 p hp hp2) = Ideal.absNorm p := by
  rw [@Ideal.absNorm_apply]
  symm
  convert Submodule.cardQuot_apply _

instance : IsCyclic (ResidueFieldAtPrime2 p hp hp2)À£ := by
  infer_instance
open scoped Classical

-- compute the cardinality of the units of the residue field
lemma l3 : Fintype.card ((ResidueFieldAtPrime2 p hp hp2)À£ ) = ((Ideal.absNorm p) - 1) := by
  rw [‚Üê l1]
  rw [‚Üê Fintype.card_units]

lemma n_not_zero (hpn : IsCoprime n (Ideal.absNorm p)) : (residue_map2 p hp hp2) n ‚â† 0 := by
  have := FiniteField.cast_card_eq_zero (ResidueFieldAtPrime2 p hp hp2)
  rw [l1] at this
  rcases hpn with ‚ü® a,b,H‚ü©
  have nquot : (a : (ResidueFieldAtPrime2 p hp hp2)) * (n : (ResidueFieldAtPrime2 p hp hp2)) = 1 := by
    have eq1 : ((a*n+b*(Ideal.absNorm p)):(ResidueFieldAtPrime2 p hp hp2)) = (1 : (ResidueFieldAtPrime2 p hp hp2)) := by
      rw_mod_cast [H]
      simp only [Nat.cast_one]
    rw [‚Üê eq1,this]
    ring
  intro hnzero
  have : (n : (ResidueFieldAtPrime2 p hp hp2)) = 0 := hnzero
  rw [this] at nquot
  ring_nf at nquot
  exact zero_ne_one nquot

abbrev cyclo (m : ‚Ñï) : Polynomial ‚Ñ§ := (Polynomial.X ^m) - (Polynomial.C 1)

abbrev cyclom1  (m : ‚Ñï): Polynomial ‚Ñ§ :=
  Finset.sum (Finset.range m) fun (i : ‚Ñï) => Polynomial.X ^ i

lemma P1 : Polynomial.eval 1 P = (n : ùìû F) := by sorry

lemma P_cyclo (m : ‚Ñï) : (cyclom1 m) * (cyclo 1) = (cyclo m) := by
  rw [cyclo,cyclom1,cyclo]
  rw [@Polynomial.C_1]
  simp [@pow_one]
  rw [geom_sum_mul (Œ± := Polynomial ‚Ñ§) (x:=Polynomial.X) (n:=m)]

lemma Pzeta (i : ‚Ñï):
  ¬¨ (n ‚à£ i) ‚Üí Polynomial.eval‚ÇÇ (Int.castRingHom (ùìû F)) (Œ∂^i) (cyclom1 n) = 0:= by
  intro hi
  have is_zero : Polynomial.eval‚ÇÇ (Int.castRingHom (ùìû F)) (Œ∂^i) (cyclo n) = 0 := by
    rw [cyclo]
    simp only [map_one, Polynomial.eval‚ÇÇ_sub, Polynomial.eval‚ÇÇ_X_pow, Polynomial.eval‚ÇÇ_one]
    have : (Œ∂^i)^n = (Œ∂^n)^i := by ring
    rw [this, ((IsPrimitiveRoot.iff_def Œ∂ n).mp h).1]
    ring_nf
  have non_zero : Polynomial.eval (Œ∂^i) (cyclo 1) ‚â† 0 := by sorry
  rw [‚Üê P_cyclo] at is_zero
  sorry


-- show that if Œ∂^i has image 1 in the residue field then n divides i (this uses that n is prime to p)
lemma injectivity (hpn : IsCoprime n (Ideal.absNorm p)) :
  ‚àÄ (i : ‚Ñï), Œ∂^i-1 ‚àà p ‚Üî n ‚à£ i := by
  intro i
  constructor
  . intro hinp
    by_contra hi
    sorry
  intro hi
  rcases hi with ‚ü® k,rfl‚ü©
  have : Œ∂^(n*k) = (Œ∂^n)^k := by ring
  rw [this,((IsPrimitiveRoot.iff_def Œ∂ n).mp h).1]
  ring_nf
  exact Ideal.zero_mem p


lemma primitivemodp (hpn : IsCoprime n (Ideal.absNorm p)) :
  IsPrimitiveRoot ((residue_map2 p hp hp2) Œ∂) n := by
    rw [IsPrimitiveRoot.iff_def]
    constructor
    . calc (residue_map2 p hp hp2) Œ∂ ^ n = (residue_map2 p hp hp2) (Œ∂^n) := by exact rfl
                _ = (residue_map2 p hp hp2) 1 := by rw [((IsPrimitiveRoot.iff_def Œ∂ n).mp h).1]
                _ = 1 := by exact rfl
    intro i hi
    rw [‚Üê injectivity Œ∂ n p hpn i]
    have : (residue_map2 p hp hp2) Œ∂^i = (residue_map2 p hp hp2 (Œ∂^i)) := rfl
    rw [this] at hi
    rw [‚Üê Ideal.Quotient.eq,hi]
    exact rfl

-- deduce the divisibility result
lemma norm_div_lemmas (hpn : IsCoprime n (Ideal.absNorm p)) : n  ‚à£ ((Ideal.absNorm p) - 1) := by
    rw [‚Üê l3 p hp hp2]
    have divide : orderOf ((residue_map2 p hp hp2) Œ∂) ‚à£ Fintype.card ((ResidueFieldAtPrime2 p hp hp2)À£)  := by
      -- exact orderOf_dvd_card
      sorry
    have := IsPrimitiveRoot.eq_orderOf (primitivemodp Œ∂ n h p hp hp2 hpn)
    rw [‚Üê this] at divide
    exact divide


lemma exits_pth_root (a : ùìû F) (p : Ideal (ùìû F)) (hp : Ideal.IsPrime p)
    (hpn : p ‚äî Ideal.span ({(n * a : (ùìû F))} : Set (ùìû F)) = ‚ä§) :
  ‚àÉ! (i : ‚Ñï), (a ^ (((Ideal.absNorm p) - 1) / n)) -  Œ∂^i ‚àà p := by sorry
