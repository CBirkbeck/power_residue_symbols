import Mathlib.NumberTheory.Cyclotomic.Basic
import Mathlib.RingTheory.Ideal.Norm
import Mathlib.Algebra.GeomSum
import Mathlib.Data.Polynomial.Basic
import Mathlib.Algebra.GroupWithZero.NonZeroDivisors
import Mathlib.Algebra.Group.Commute.Units

open scoped NumberField BigOperators

variable {F : Type*} [Field F] [NumberField F] (Œ∂ : (ùìû F)À£) (n : ‚Ñï+) (h : IsPrimitiveRoot Œ∂ n)
variable (p : Ideal (ùìû F)) (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•)  (r : Ideal (ùìû F))

/--The residue field of a number field (specifically the ring of intergers) at a prime-/
abbrev ResidueFieldAtPrime (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•) :=
  LocalRing.ResidueField (Localization.AtPrime p)

/--The residue field of a number field (specifically the ring of intergers) at a prime-/
abbrev ResidueRingAtIdeal := ùìû F ‚ß∏ r

/--The residue field of a number field (specifically the ring of intergers) at a prime-/
abbrev ResidueFieldAtPrime2 (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•) := ùìû F ‚ß∏ p

noncomputable section


-- noncomputable instance : Field (ResidueFieldAtPrime p hp) := by
  -- apply LocalRing.ResidueField.field

-- noncomputable instance : CommRing (ResidueFieldAtPrime2 p) := by
--   apply Ideal.Quotient.commRing

noncomputable instance : Field (ResidueRingAtIdeal p) := by
  have h : Ideal.IsMaximal p := by
    apply Ideal.IsPrime.isMaximal hp hp2
  apply Ideal.Quotient.field

noncomputable instance : CommRing (ResidueRingAtIdeal r) := by
  apply Ideal.Quotient.commRing

noncomputable instance : Field (ResidueFieldAtPrime2 p hp hp2) := by
  have h : Ideal.IsMaximal p := by
    apply Ideal.IsPrime.isMaximal hp hp2
  apply Ideal.Quotient.field

abbrev residue_map : ùìû F ‚Üí+* (ResidueFieldAtPrime p hp hp2) :=
  (LocalRing.residue (Localization.AtPrime p)).comp (algebraMap (ùìû F) (Localization.AtPrime p))

abbrev residue_map_at_ideal (n : Ideal (ùìû F)) : ùìû F ‚Üí+* (ResidueRingAtIdeal n) := Ideal.Quotient.mk n

abbrev residue_map2 : ùìû F ‚Üí+* (ResidueFieldAtPrime2 p hp hp2) := Ideal.Quotient.mk p

instance [hp2 : Fact (p ‚â† ‚ä•)]   : Fintype (ResidueRingAtIdeal p) :=
  Ideal.fintypeQuotientOfFreeOfNeBot p hp2.out

instance as : Fintype (ResidueFieldAtPrime2 p hp hp2) := Ideal.fintypeQuotientOfFreeOfNeBot p hp2


lemma l0  [Fact (p ‚â† ‚ä•)] : Fintype.card (ResidueRingAtIdeal p) = Ideal.absNorm p := by
  rw [@Ideal.absNorm_apply]
  symm
  convert Submodule.cardQuot_apply _


lemma l1 : Fintype.card (ResidueFieldAtPrime2 p hp hp2) = Ideal.absNorm p := by
  rw [@Ideal.absNorm_apply]
  symm
  convert Submodule.cardQuot_apply _

open scoped Classical

-- compute the cardinality of the units of the residue field
lemma l3 : Fintype.card ((ResidueFieldAtPrime2 p hp hp2)À£ ) = ((Ideal.absNorm p) - 1) := by
  rw [‚Üê l1]
  rw [‚Üê Fintype.card_units]

lemma n_not_zero (hpn : IsCoprime (n : ‚Ñï) (Ideal.absNorm p)) : (residue_map2 p hp hp2) n ‚â† 0 := by
  have := FiniteField.cast_card_eq_zero (ResidueFieldAtPrime2 p hp hp2)
  rw [l1] at this
  rcases hpn with ‚ü® a,b,H‚ü©
  have nquot : (a : (ResidueFieldAtPrime2 p hp hp2)) * (n : (ResidueFieldAtPrime2 p hp hp2)) = 1 := by
    have eq1 : ((a*n+b*(Ideal.absNorm p)):(ResidueFieldAtPrime2 p hp hp2)) = (1 : (ResidueFieldAtPrime2 p hp hp2)) := by
      rw_mod_cast [H]
      simp only [Nat.cast_one]
    rw [‚Üê eq1,this]
    ring
  intro hnzero
  have : (n : (ResidueFieldAtPrime2 p hp hp2)) = 0 := hnzero
  rw [this] at nquot
  ring_nf at nquot
  exact zero_ne_one nquot


/-
abbrev cyclo (m : ‚Ñï) : Polynomial ‚Ñ§ := (Polynomial.X ^m) - (Polynomial.C 1)

abbrev cyclom1  (m : ‚Ñï): Polynomial ‚Ñ§ :=
  Finset.sum (Finset.range m) fun (i : ‚Ñï) => Polynomial.X ^ i

lemma P1 : Polynomial.eval (1 : ‚Ñ§) (cyclom1 n) = (n : ‚Ñ§) := by
  rw [cyclom1]
  rw [@Polynomial.eval_geom_sum]
  simp


lemma P_cyclo (m : ‚Ñï) : (cyclom1 m) * (cyclo 1) = (cyclo m) := by
  rw [cyclo,cyclom1,cyclo]
  rw [@Polynomial.C_1]
  simp [@pow_one]
  rw [geom_sum_mul (Œ± := Polynomial ‚Ñ§) (x:=Polynomial.X) (n:=m)]

lemma Pzeta (i : ‚Ñï):
  ¬¨ (n ‚à£ i) ‚Üí Polynomial.eval‚ÇÇ (Int.castRingHom (ùìû F)) (Œ∂^i) (cyclom1 n) = 0:= by
  intro hi
  have is_zero : Polynomial.eval‚ÇÇ (Int.castRingHom (ùìû F)) (Œ∂^i) (cyclo n) = 0 := by
    rw [cyclo]
    simp only [map_one, Polynomial.eval‚ÇÇ_sub, Polynomial.eval‚ÇÇ_X_pow, Polynomial.eval‚ÇÇ_one]
    have : (Œ∂^i)^n = (Œ∂^n)^i := by ring
    rw [this, ((IsPrimitiveRoot.iff_def Œ∂ n).mp h).1]
    ring_nf
  have hii : Œ∂^i ‚â† 1 := by
    have := IsPrimitiveRoot.pow_eq_one_iff_dvd h i
    contrapose! this
    left
    exact ‚ü®this,hi‚ü©
  have non_zero : Polynomial.eval‚ÇÇ (Int.castRingHom (ùìû F)) (Œ∂^i) (cyclo 1) ‚â† 0 := by
    rw [cyclo]
    simp only [pow_one, map_one, Polynomial.eval‚ÇÇ_sub, Polynomial.eval‚ÇÇ_X, Polynomial.eval‚ÇÇ_one,
      ne_eq]
    exact sub_ne_zero_of_ne hii

  rw [‚Üê P_cyclo] at is_zero
  simp only [Polynomial.eval‚ÇÇ_mul] at is_zero
  rw [mul_eq_zero] at is_zero
  cases' is_zero with h1 h2
  . exact h1
  . by_contra h
    simp only [ne_eq, Polynomial.eval‚ÇÇ_sub, pow_one, Polynomial.eval‚ÇÇ_X, map_one,
      Polynomial.eval‚ÇÇ_one] at *
    exact non_zero h2


-/



/-
-- show that if Œ∂^i has image 1 in the residue field then n divides i (this uses that n is prime to p)
lemma injectivity (hpn : IsCoprime (n : ‚Ñ§) (Ideal.absNorm p)) :
  ‚àÄ (i : ‚Ñï), Œ∂^i-1 ‚àà p ‚Üî n ‚à£ i := by
  intro i
  constructor
  . intro hinp
    by_contra hi
    have eval0 := Pzeta Œ∂ n i hi
    have evalmodp : Polynomial.eval‚ÇÇ ((residue_map2 p hp hp2).comp (Int.castRingHom (ùìû F))) ((residue_map2 p hp hp2) (Œ∂^i)) (cyclom1 n) = 0 := by
      have : Polynomial.eval‚ÇÇ ((residue_map2 p hp hp2).comp (Int.castRingHom (ùìû F))) ((residue_map2 p hp hp2) (Œ∂^i)) (cyclom1 n) =
         Finset.sum (Finset.range n) fun (i : ‚Ñï) => (residue_map2 p hp hp2) Œ∂^i := by
         unfold cyclom1
         simp
         sorry
      sorry

    have equalzetai : (residue_map2 p hp hp2) (Œ∂^i) = 1 := by sorry
    rw [equalzetai] at evalmodp
    sorry
  intro hi
  rcases hi with ‚ü® k,rfl‚ü©
  have : Œ∂^(n*k) = (Œ∂^n)^k := by ring
  rw [this,((IsPrimitiveRoot.iff_def Œ∂ n).mp h).1]
  ring_nf
  exact Ideal.zero_mem p

#check injectivity
-/


lemma primitivemodp' (hpn : IsCoprime (n : ‚Ñï) (Ideal.absNorm p)) :
  IsPrimitiveRoot ((residue_map2 p hp hp2) Œ∂) n := by
  haveI  : NeZero (n : ResidueFieldAtPrime2 p hp hp2) := by
    have := n_not_zero  n p hp hp2 hpn
    rw [neZero_iff]
    exact this
  rw [‚Üê IsPrimitiveRoot.coe_units_iff] at h
  rw [‚Üê Polynomial.isRoot_cyclotomic_iff] at *
  have h1 := Polynomial.IsRoot.map (x := Œ∂) (f := residue_map2 p hp hp2) h
  simp at *
  exact h1


/-
lemma primitivemodp (hpn : IsCoprime (n : ‚Ñï) (Ideal.absNorm p)) :
  IsPrimitiveRoot ((residue_map2 p hp hp2) Œ∂) n := by
    rw [IsPrimitiveRoot.iff_def]
    constructor
    . calc (residue_map2 p hp hp2) Œ∂ ^ (n : ‚Ñï)= (residue_map2 p hp hp2) (Œ∂^ (n : ‚Ñï)) := by exact rfl
                _ = (residue_map2 p hp hp2) 1 := by rw [((IsPrimitiveRoot.iff_def Œ∂ n).mp h).1]
                _ = 1 := by exact rfl
    intro i hi
    rw [‚Üê injectivity Œ∂ n h p hp hp2 hpn i]
    have : (residue_map2 p hp hp2) Œ∂^i = (residue_map2 p hp hp2 (Œ∂^i)) := rfl
    rw [this] at hi
    rw [‚Üê Ideal.Quotient.eq,hi]
    exact rfl
-/

lemma isunit : IsUnit ((residue_map2 p hp hp2) Œ∂) := by
  rw [‚Üê IsPrimitiveRoot.coe_units_iff] at h
  exact IsUnit.map (residue_map2 p hp hp2) (IsPrimitiveRoot.isUnit h n.2)


-- deduce the divisibility result
lemma norm_div_lemmas (hpn : IsCoprime (n : ‚Ñï) (Ideal.absNorm p)) :
    (n : ‚Ñï)  ‚à£ ((Ideal.absNorm p) - 1) := by
  rw [‚Üê l3 p hp hp2]
  have divide := orderOf_dvd_card (G := (ResidueFieldAtPrime2 p hp hp2)À£)
        (x := IsUnit.unit (isunit Œ∂ n h p hp hp2)  )
  convert divide
  have ht : IsPrimitiveRoot (IsUnit.unit (isunit Œ∂ n h p hp hp2)) n := by
    have := (primitivemodp' Œ∂ n h p hp hp2 hpn)
    rw [ ‚Üê IsPrimitiveRoot.coe_units_iff]
    simp [this]
  have := IsPrimitiveRoot.eq_orderOf ht
  simp at *
  rw [this]

/-
this should help for the lemma
should we assume Œ∂ to be a unit at the beginning? it would make things easier
-/

lemma root_is_unit
{R : Type*} [CommRing R] (a : R) (k : ‚Ñï+) (ha : a^(k : ‚Ñï) = 1) : IsUnit a := by
  rw [‚Üê isUnit_pow_iff (n := k)]
  simp [ha]
  simp

lemma pow1 {R : Type*} [CommRing R] [IsDomain R] (k : ‚Ñï+) (a : RÀ£) (u : RÀ£)
  (hu : IsPrimitiveRoot u k) (ha : a^k.val = 1) :
   ‚àÉ (i : ‚Ñ§), u^i = a := by
  have : a ‚àà Subgroup.zpowers u := by
    have pow_u := IsPrimitiveRoot.zpowers_eq hu
    have a_root : a ‚àà rootsOfUnity k R := by
      rw [‚Üê mem_rootsOfUnity] at ha
      exact ha
    rw [pow_u]
    assumption
  rw [Subgroup.mem_zpowers_iff] at this
  rcases this with ‚ü® i, hi‚ü©
  use i

lemma pow2 {R : Type*} [CommRing R] [IsDomain R] (k : ‚Ñï+)  (a : R) (u : RÀ£)
  (hu : IsPrimitiveRoot u k) (ha : a^k.val = 1) :
  ‚àÉ (i : ‚Ñ§), ‚Üë(u^i)  = a := by
  have a_unit := root_is_unit a k  ha
  have ha' : (IsUnit.unit a_unit)^k.val = 1 := by aesop
  rcases pow1 k (IsUnit.unit a_unit) u hu ha' with ‚ü®i, hi‚ü©
  use i
  rw_mod_cast [hi]
  simp


--def powerResidueSymbol (a : ùìû F) (r : Ideal (ùìû F)): ResidueRingAtIdeal r  :=


lemma exists_pth_root (a : ùìû F) (p : Ideal (ùìû F)) (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•)
   (hpn : IsCoprime (n : ‚Ñï) (Ideal.absNorm p)) :
  ‚àÉ! (Œ∑ : rootsOfUnity n (ùìû F)À£) , (a ^ (((Ideal.absNorm p) - 1) / n)) -  Œ∑.1.1  ‚àà p := by

  have h0 : (residue_map2 p hp hp2) (a ^ (((Ideal.absNorm p) - 1) / n))^ (n : ‚Ñï) = 1 := by sorry
  have := IsPrimitiveRoot.eq_pow_of_pow_eq_one (primitivemodp' Œ∂ n h p hp hp2 hpn) h0 n.2
  obtain ‚ü®i, hi1, hi2‚ü© := this
  have hy : (Œ∂^i)^(n : ‚Ñï) = 1 := by sorry
  let z := rootsOfUnity.mkOfPowEq (Œ∂^i) hy
  use z
  simp
  constructor
  rw [‚Üê Ideal.Quotient.mk_eq_mk_iff_sub_mem]
  convert hi2.symm
  intro b hb hb2
  rw [‚Üê Ideal.Quotient.mk_eq_mk_iff_sub_mem] at hb2
  rw [‚Üê hi2] at hb2
  simp [z]

  sorry




def powerResidueSymbol (a : ùìû F) (p : Ideal (ùìû F)) (hp : Ideal.IsPrime p) (hp2 :p ‚â† ‚ä•)
  (hpn : IsCoprime (n : ‚Ñï) (Ideal.absNorm p)) : rootsOfUnity n (ùìû F)À£ :=
   Classical.choose  (exists_pth_root Œ∂ n h a p hp hp2 hpn)
